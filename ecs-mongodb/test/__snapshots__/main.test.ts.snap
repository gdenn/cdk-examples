// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
{
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/arm64/recommended/image_id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "ClusterDefaultAutoScalingGroupASG0F98E147": {
      "Properties": {
        "DesiredCapacity": "1",
        "LaunchConfigurationName": {
          "Ref": "ClusterDefaultAutoScalingGroupLaunchConfig81EA5466",
        },
        "MaxSize": "1",
        "MinSize": "1",
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcprivateSubnet1SubnetCEAD3716",
          },
          {
            "Ref": "VpcprivateSubnet2Subnet2DE7549C",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingReplacingUpdate": {
          "WillReplace": true,
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvoketestClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic38D3D000BBC980AA": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865",
            "Arn",
          ],
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB",
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865": {
      "DependsOn": [
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E",
        "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "import boto3, json, os, time

ecs = boto3.client('ecs')
autoscaling = boto3.client('autoscaling')


def lambda_handler(event, context):
  print(json.dumps(dict(event, ResponseURL='...')))
  cluster = os.environ['CLUSTER']
  snsTopicArn = event['Records'][0]['Sns']['TopicArn']
  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
  instance_id = lifecycle_event.get('EC2InstanceId')
  if not instance_id:
    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))
    return

  instance_arn = container_instance_arn(cluster, instance_id)
  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

  if not instance_arn:
    return

  task_arns = container_instance_task_arns(cluster, instance_arn)

  if task_arns:
    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))

  while has_tasks(cluster, instance_arn, task_arns):
    time.sleep(10)

  try:
    print('Terminating instance %s' % instance_id)
    autoscaling.complete_lifecycle_action(
        LifecycleActionResult='CONTINUE',
        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
  except Exception as e:
    # Lifecycle action may have already completed.
    print(str(e))


def container_instance_arn(cluster, instance_id):
  """Turn an instance ID into a container instance ARN."""
  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
  if not arns:
    return None
  return arns[0]

def container_instance_task_arns(cluster, instance_arn):
  """Fetch tasks for a container instance ARN."""
  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']
  return arns

def has_tasks(cluster, instance_arn, task_arns):
  """Return True if the instance is running tasks for the given cluster."""
  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
  if not instances:
    return False
  instance = instances[0]

  if instance['status'] == 'ACTIVE':
    # Start draining, then try again later
    set_container_instance_to_draining(cluster, instance_arn)
    return True

  task_count = None

  if task_arns:
    # Fetch details for tasks running on the container instance
    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']
    if tasks:
      # Consider any non-stopped tasks as running
      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']

  if not task_count:
    # Fallback to instance task counts if detailed task information is unavailable
    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']

  print('Instance %s has %s tasks' % (instance_arn, task_count))

  return task_count > 0

def set_container_instance_to_draining(cluster, instance_arn):
  ecs.update_container_instances_state(
      cluster=cluster,
      containerInstances=[instance_arn], status='DRAINING')


def pick(dct, *keys):
  """Pick a subset of a dict."""
  return {k: v for k, v in dct.items() if k in keys}
",
        },
        "Environment": {
          "Variables": {
            "CLUSTER": {
              "Ref": "ClusterEB0386A7",
            },
          },
        },
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "Timeout": 310,
      },
      "Type": "AWS::Lambda::Function",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeInstanceAttribute",
                "ec2:DescribeInstanceStatus",
                "ec2:DescribeHosts",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": "autoscaling:CompleteLifecycleAction",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":autoscaling:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":autoScalingGroup:*:autoScalingGroupName/",
                    {
                      "Ref": "ClusterDefaultAutoScalingGroupASG0F98E147",
                    },
                  ],
                ],
              },
            },
            {
              "Action": [
                "ecs:DescribeContainerInstances",
                "ecs:DescribeTasks",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecs:ListContainerInstances",
                "ecs:SubmitContainerStateChange",
                "ecs:SubmitTaskStateChange",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ecs:UpdateContainerInstancesState",
                "ecs:ListTasks",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E",
        "Roles": [
          {
            "Ref": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic3B6438EC": {
      "Properties": {
        "Endpoint": {
          "Fn::GetAtt": [
            "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865",
            "Arn",
          ],
        },
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB",
        },
      },
      "Type": "AWS::SNS::Subscription",
    },
    "ClusterDefaultAutoScalingGroupInstanceProfile2BB4FE55": {
      "Properties": {
        "Roles": [
          {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole9A14B384",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "ClusterDefaultAutoScalingGroupInstanceRole9A14B384": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ecs:DeregisterContainerInstance",
                "ecs:RegisterContainerInstance",
                "ecs:Submit*",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "ClusterEB0386A7",
                  "Arn",
                ],
              },
            },
            {
              "Action": [
                "ecs:Poll",
                "ecs:StartTelemetrySession",
              ],
              "Condition": {
                "ArnEquals": {
                  "ecs:cluster": {
                    "Fn::GetAtt": [
                      "ClusterEB0386A7",
                      "Arn",
                    ],
                  },
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ecs:DiscoverPollEndpoint",
                "ecr:GetAuthorizationToken",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81",
        "Roles": [
          {
            "Ref": "ClusterDefaultAutoScalingGroupInstanceRole9A14B384",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupInstanceSecurityGroup1D15236A": {
      "Properties": {
        "GroupDescription": "test/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "ClusterDefaultAutoScalingGroupLaunchConfig81EA5466": {
      "DependsOn": [
        "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81",
        "ClusterDefaultAutoScalingGroupInstanceRole9A14B384",
      ],
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "ClusterDefaultAutoScalingGroupInstanceProfile2BB4FE55",
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2arm64recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t4g.medium",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "ClusterDefaultAutoScalingGroupInstanceSecurityGroup1D15236A",
              "GroupId",
            ],
          },
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash
echo ECS_CLUSTER=",
                {
                  "Ref": "ClusterEB0386A7",
                },
                " >> /etc/ecs/ecs.config
sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP
sudo service iptables save
echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config",
              ],
            ],
          },
        },
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHook4A9A4325": {
      "DependsOn": [
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5",
        "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663",
      ],
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "ClusterDefaultAutoScalingGroupASG0F98E147",
        },
        "DefaultResult": "CONTINUE",
        "HeartbeatTimeout": 300,
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": {
          "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB",
        },
        "RoleARN": {
          "Fn::GetAtt": [
            "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663",
            "Arn",
          ],
        },
      },
      "Type": "AWS::AutoScaling::LifecycleHook",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "autoscaling.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "sns:Publish",
              "Effect": "Allow",
              "Resource": {
                "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5",
        "Roles": [
          {
            "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Cluster/DefaultAutoScalingGroup",
          },
        ],
      },
      "Type": "AWS::SNS::Topic",
    },
    "ClusterEB0386A7": {
      "Type": "AWS::ECS::Cluster",
    },
    "MongoDB469701C9": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Cpu": 512,
            "Environment": [
              {
                "Name": "MONGO_INITDB_ROOT_USERNAME",
                "Value": "root",
              },
              {
                "Name": "MONGO_INITDB_ROOT_PASSWORD",
                "Value": "secret123",
              },
            ],
            "Essential": true,
            "Image": "mongo:5.0.15",
            "Memory": 1024,
            "MountPoints": [
              {
                "ContainerPath": "/data/db",
                "ReadOnly": false,
                "SourceVolume": "data",
              },
            ],
            "Name": "MongoDB",
            "PortMappings": [
              {
                "ContainerPort": 27017,
                "HostPort": 27017,
                "Protocol": "tcp",
              },
            ],
          },
        ],
        "Family": "testMongoDB31799E26",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": [
          "EC2",
        ],
        "TaskRoleArn": {
          "Fn::GetAtt": [
            "MongoDBTaskRole93BA8D04",
            "Arn",
          ],
        },
        "Volumes": [
          {
            "DockerVolumeConfiguration": {
              "Autoprovision": true,
              "Driver": "rexray/ebs",
              "DriverOpts": {
                "size": "40",
                "volumeType": "gp2",
              },
              "Scope": "shared",
            },
            "Name": "data",
          },
        ],
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "MongoDBTaskRole93BA8D04": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcVPCGWBF912B6E": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "VpcprivateSubnet1DefaultRouteB506891A": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcpublicSubnet1NATGatewayA036E8A6",
        },
        "RouteTableId": {
          "Ref": "VpcprivateSubnet1RouteTable1979EACB",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcprivateSubnet1RouteTable1979EACB": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/privateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcprivateSubnet1RouteTableAssociationEEBD93CE": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcprivateSubnet1RouteTable1979EACB",
        },
        "SubnetId": {
          "Ref": "VpcprivateSubnet1SubnetCEAD3716",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcprivateSubnet1SubnetCEAD3716": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "test/Vpc/privateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcprivateSubnet2DefaultRouteBAC3C1C3": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcpublicSubnet1NATGatewayA036E8A6",
        },
        "RouteTableId": {
          "Ref": "VpcprivateSubnet2RouteTable4D0FFC8C",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcprivateSubnet2RouteTable4D0FFC8C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/privateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcprivateSubnet2RouteTableAssociationB691E645": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcprivateSubnet2RouteTable4D0FFC8C",
        },
        "SubnetId": {
          "Ref": "VpcprivateSubnet2Subnet2DE7549C",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcprivateSubnet2Subnet2DE7549C": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "test/Vpc/privateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcpublicSubnet1DefaultRouteB88F9E93": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcpublicSubnet1EIP411541E6": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcpublicSubnet1NATGatewayA036E8A6": {
      "DependsOn": [
        "VpcpublicSubnet1DefaultRouteB88F9E93",
        "VpcpublicSubnet1RouteTableAssociation4E83B6E4",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcpublicSubnet1EIP411541E6",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcpublicSubnet1RouteTable15C15F8E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcpublicSubnet1RouteTableAssociation4E83B6E4": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet1RouteTable15C15F8E",
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet1Subnet2BB74ED7",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcpublicSubnet1Subnet2BB74ED7": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcpublicSubnet2DefaultRoute732F0BEB": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcpublicSubnet2RouteTableAssociationCCE257FF": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcpublicSubnet2RouteTableC5A6DF77",
        },
        "SubnetId": {
          "Ref": "VpcpublicSubnet2SubnetE34B022A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcpublicSubnet2RouteTableC5A6DF77": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcpublicSubnet2SubnetE34B022A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "test/Vpc/publicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;

{
 "Resources": {
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/Resource"
   }
  },
  "VpcpublicSubnet1Subnet2BB74ED7": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": "eu-central-1a",
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/Subnet"
   }
  },
  "VpcpublicSubnet1RouteTable15C15F8E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/RouteTable"
   }
  },
  "VpcpublicSubnet1RouteTableAssociation4E83B6E4": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcpublicSubnet1RouteTable15C15F8E"
    },
    "SubnetId": {
     "Ref": "VpcpublicSubnet1Subnet2BB74ED7"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/RouteTableAssociation"
   }
  },
  "VpcpublicSubnet1DefaultRouteB88F9E93": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcpublicSubnet1RouteTable15C15F8E"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/DefaultRoute"
   }
  },
  "VpcpublicSubnet1EIP411541E6": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/EIP"
   }
  },
  "VpcpublicSubnet1NATGatewayA036E8A6": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "SubnetId": {
     "Ref": "VpcpublicSubnet1Subnet2BB74ED7"
    },
    "AllocationId": {
     "Fn::GetAtt": [
      "VpcpublicSubnet1EIP411541E6",
      "AllocationId"
     ]
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "VpcpublicSubnet1DefaultRouteB88F9E93",
    "VpcpublicSubnet1RouteTableAssociation4E83B6E4"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet1/NATGateway"
   }
  },
  "VpcpublicSubnet2SubnetE34B022A": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": "eu-central-1b",
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet2/Subnet"
   }
  },
  "VpcpublicSubnet2RouteTableC5A6DF77": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/publicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet2/RouteTable"
   }
  },
  "VpcpublicSubnet2RouteTableAssociationCCE257FF": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcpublicSubnet2RouteTableC5A6DF77"
    },
    "SubnetId": {
     "Ref": "VpcpublicSubnet2SubnetE34B022A"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet2/RouteTableAssociation"
   }
  },
  "VpcpublicSubnet2DefaultRoute732F0BEB": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcpublicSubnet2RouteTableC5A6DF77"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/publicSubnet2/DefaultRoute"
   }
  },
  "VpcprivateSubnet1SubnetCEAD3716": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": "eu-central-1a",
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/privateSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet1/Subnet"
   }
  },
  "VpcprivateSubnet1RouteTable1979EACB": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/privateSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet1/RouteTable"
   }
  },
  "VpcprivateSubnet1RouteTableAssociationEEBD93CE": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcprivateSubnet1RouteTable1979EACB"
    },
    "SubnetId": {
     "Ref": "VpcprivateSubnet1SubnetCEAD3716"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet1/RouteTableAssociation"
   }
  },
  "VpcprivateSubnet1DefaultRouteB506891A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcprivateSubnet1RouteTable1979EACB"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcpublicSubnet1NATGatewayA036E8A6"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet1/DefaultRoute"
   }
  },
  "VpcprivateSubnet2Subnet2DE7549C": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": "eu-central-1b",
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/privateSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet2/Subnet"
   }
  },
  "VpcprivateSubnet2RouteTable4D0FFC8C": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc/privateSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet2/RouteTable"
   }
  },
  "VpcprivateSubnet2RouteTableAssociationB691E645": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcprivateSubnet2RouteTable4D0FFC8C"
    },
    "SubnetId": {
     "Ref": "VpcprivateSubnet2Subnet2DE7549C"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet2/RouteTableAssociation"
   }
  },
  "VpcprivateSubnet2DefaultRouteBAC3C1C3": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcprivateSubnet2RouteTable4D0FFC8C"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcpublicSubnet1NATGatewayA036E8A6"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/privateSubnet2/DefaultRoute"
   }
  },
  "VpcIGWD7BA715C": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/IGW"
   }
  },
  "VpcVPCGWBF912B6E": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "InternetGatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Vpc/VPCGW"
   }
  },
  "ClusterEB0386A7": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupInstanceSecurityGroup1D15236A": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "projen-test-dev/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupInstanceRole9A14B384": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/InstanceRole/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClusterEB0386A7",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ClusterEB0386A7",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81",
    "Roles": [
     {
      "Ref": "ClusterDefaultAutoScalingGroupInstanceRole9A14B384"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupInstanceProfile2BB4FE55": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "ClusterDefaultAutoScalingGroupInstanceRole9A14B384"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/InstanceProfile"
   }
  },
  "ClusterDefaultAutoScalingGroupLaunchConfig81EA5466": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "Properties": {
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t3.medium",
    "IamInstanceProfile": {
     "Ref": "ClusterDefaultAutoScalingGroupInstanceProfile2BB4FE55"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "ClusterDefaultAutoScalingGroupInstanceSecurityGroup1D15236A",
       "GroupId"
      ]
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\necho ECS_CLUSTER=",
        {
         "Ref": "ClusterEB0386A7"
        },
        " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "ClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy06157A81",
    "ClusterDefaultAutoScalingGroupInstanceRole9A14B384"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/LaunchConfig"
   }
  },
  "ClusterDefaultAutoScalingGroupASG0F98E147": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "1",
    "DesiredCapacity": "1",
    "LaunchConfigurationName": {
     "Ref": "ClusterDefaultAutoScalingGroupLaunchConfig81EA5466"
    },
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcprivateSubnet1SubnetCEAD3716"
     },
     {
      "Ref": "VpcprivateSubnet2Subnet2DE7549C"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/ASG"
   }
  },
  "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeHosts"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:eu-central-1:647000908054:autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "ClusterDefaultAutoScalingGroupASG0F98E147"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ClusterEB0386A7",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "ClusterEB0386A7",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:UpdateContainerInstancesState",
        "ecs:ListTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "ClusterEB0386A7",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E",
    "Roles": [
     {
      "Ref": "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "ClusterEB0386A7"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy221F6E5E",
    "ClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole2AC250B1"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeprojentestdevClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic8350C2598C7ED730": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:projentestdevClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic8350C259"
   }
  },
  "ClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic3B6438EC": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "ClusterDefaultAutoScalingGroupDrainECSHookFunctionFE918865",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "projen-test-dev/Cluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5",
    "Roles": [
     {
      "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
   }
  },
  "ClusterDefaultAutoScalingGroupLifecycleHookDrainHook4A9A4325": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "ClusterDefaultAutoScalingGroupASG0F98E147"
    },
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "NotificationTargetARN": {
     "Ref": "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicFE5437FB"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyFFFD6EA5",
    "ClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole70201663"
   ],
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/Cluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource"
   }
  },
  "MongoDBTaskRole93BA8D04": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/MongoDB/TaskRole/Resource"
   }
  },
  "MongoDB469701C9": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Cpu": 512,
      "Environment": [
       {
        "Name": "MONGO_INITDB_ROOT_USERNAME",
        "Value": "root"
       },
       {
        "Name": "MONGO_INITDB_ROOT_PASSWORD",
        "Value": "secret123"
       }
      ],
      "Essential": true,
      "Image": "mongo:5.0.15",
      "Memory": 1024,
      "MountPoints": [
       {
        "ContainerPath": "/data/db",
        "ReadOnly": false,
        "SourceVolume": "my-data-volume"
       }
      ],
      "Name": "MongoDB",
      "PortMappings": [
       {
        "ContainerPort": 27017,
        "HostPort": 27017,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Family": "projentestdevMongoDB3AC07789",
    "NetworkMode": "bridge",
    "RequiresCompatibilities": [
     "EC2"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "MongoDBTaskRole93BA8D04",
      "Arn"
     ]
    },
    "Volumes": [
     {
      "DockerVolumeConfiguration": {
       "Autoprovision": true,
       "Driver": "rexray/ebs",
       "DriverOpts": {
        "volumetype": "gp2",
        "size": "20"
       },
       "Scope": "shared"
      },
      "Name": "my-data-volume"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/MongoDB/Resource"
   }
  },
  "MongoDBService40D664AF": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "ClusterEB0386A7"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "EnableECSManagedTags": false,
    "LaunchType": "EC2",
    "SchedulingStrategy": "REPLICA",
    "TaskDefinition": {
     "Ref": "MongoDB469701C9"
    }
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/MongoDBService/Service"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/2VSy27CMBD8Fu7GLRyQekSUUiRUWQniWm3MBpYkduQHCEX59zoJIWl72pnxej0ee84XCz6bwM1O5TGb5pTwKnYgMxak7wrlnFeHUrJVqg5ixYRPcpKxTxS6RhtQpL3DPSQ5DvqgLa3VksCRVs/mBqy3oilf4Dbg8AZ3JgxdAxwGb5VDE3Df0Dl5sKULXs8FKsdilN6Qu2+M9mXrYSzUDKXl1Sr3Noxrlnu4lvM92OwdU1LUG/yraOWAFJqRFvbFaK4kuwt3sGbgnbYSclInXi0DiTvytLUDr+Q5TEzp5M0zkn+tO0pR3mWOn1pn7caxUDOCgleR7vJuq9DhbdqABrRV1oGSKIxOKQ/+ciiSI/DqI7jozx5jgaYgawOrmVUhsvASVhoq+4ZffK9Laj9HC+qaRWi1N10mAgwU+Ii7X6iZ0kfkF/tynb3xBX+dXCzR1HjlqEAedfUHjfyjhZcCAAA="
   },
   "Metadata": {
    "aws:cdk:path": "projen-test-dev/CDKMetadata/Default"
   }
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}